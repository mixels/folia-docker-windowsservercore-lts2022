name: Docker Image CI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  issues: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Extract version from tag (remove 'v')
      id: get_version
      run: |
        $version = $env:GITHUB_REF -replace '^.*/', ''     # Extract after last slash
        $version = $version -replace '^v', ''              # Strip leading 'v' if present
        "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Log in to Docker Hub
      run: |
        $DockerPassword = "${{secrets.DOCKER_PASSWORD}}"
        $DockerPassword | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin

    - name: Build the Docker image
      run: docker build --build-arg FOLIA_VERSION="$env:VERSION" -t "${{vars.DOCKER_IMAGE_NAME}}:$env:VERSION" .

    - name: Save Docker image for test job
      run: docker save ${{vars.DOCKER_IMAGE_NAME}}:$env:VERSION > image.tar

    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar

  push:
    runs-on: windows-latest
    needs:
      - build

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Extract version from tag (remove 'v')
      id: get_version
      run: |
        $VERSION = $env:GITHUB_REF -replace '^.*/', ''
        $VERSION = $VERSION -replace '^v', ''
        Add-Content -Path $env:GITHUB_ENV -Value "VERSION=$VERSION"

    - name: Load Docker image
      run: docker load -i image.tar

    - name: Log in to Docker Hub
      run: |
        $DockerPassword = "${{secrets.DOCKER_PASSWORD}}"
        $DockerPassword | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin

    - name: Push the Docker image
      run: docker push "${{vars.DOCKER_IMAGE_NAME}}:$env:VERSION"

  create-issue-on-failure:
    runs-on: ubuntu-latest
    needs:
      - build
      - push
    if: failure()
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Replace placeholders in issue template
        env:
          SHA: ${{ github.sha }}
          WORKFLOW_NAME: ${{ github.workflow }}
          JOB_NAME: ${{ github.job }}
          RUN_ID: ${{ github.run_id }}
          LOGS_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          TAG=${GITHUB_REF##*/}
          echo "TAG=$TAG" >> $GITHUB_ENV

          sed -i "s|{{sha}}|$SHA|g" .github/ISSUE_TEMPLATE.md
          sed -i "s|{{tag}}|$TAG|g" .github/ISSUE_TEMPLATE.md
          sed -i "s|{{workflow_name}}|$WORKFLOW_NAME|g" .github/ISSUE_TEMPLATE.md
          sed -i "s|{{job_name}}|$JOB_NAME|g" .github/ISSUE_TEMPLATE.md
          sed -i "s|{{run_id}}|$RUN_ID|g" .github/ISSUE_TEMPLATE.md
          sed -i "s|{{logs_url}}|$LOGS_URL|g" .github/ISSUE_TEMPLATE.md

      - name: Create a GitHub Issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          filename: .github/ISSUE_TEMPLATE.md

